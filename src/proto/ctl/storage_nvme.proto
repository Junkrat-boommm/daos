//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package ctl;

import "common.proto";

// NVMe Storage Protobuf Definitions related to interactions between
// DAOS control server and locally attached storage.

// NvmeController represents an NVMe Controller (SSD).
message NvmeController {
	// Namespace represents a namespace created on an NvmeController.
	message Namespace {
		uint32 id = 1;		// namespace id
		uint64 size = 2;	// device capacity in bytes
		string ctrlrpciaddr = 3;
	}

	// Health mirrors bio_dev_state structure.
	message Health {
		string bds_model = 1;
		string bds_serial = 2;
		uint64 bds_timestamp = 3;
		uint64 bds_error_count = 4;
		// Device health details
		uint32 bds_warn_temp_time = 5;
		uint32 bds_crit_temp_time = 6;
		uint64 bds_ctrl_busy_time = 7;
		uint64 bds_power_cycles = 8;
		uint64 bds_power_on_hours = 9;
		uint64 bds_unsafe_shutdowns = 10;
		uint64 bds_media_errors = 11;
		uint64 bds_error_log_entries = 12;
		// I/O error counters
		uint32 bds_bio_read_errs = 13;
		uint32 bds_bio_write_errs = 14;
		uint32 bds_bio_unmap_errs = 15;
		uint32 bds_checksum_errs = 16;
		uint32 bds_temperature = 17; // in Kelvin
		// Critical warnings
		bool bds_temp_warning = 18;
		bool bds_avail_spare_warning = 19;
		bool bds_dev_reliability_warning = 20;
		bool bds_read_only_warning = 21;
		bool bds_volatile_mem_warning = 22; // volatile memory backup
	}

	string model = 1;	// model name
	string serial = 2;	// serial number
	string pciaddr = 3;	// pci address
	string fwrev = 4;	// firmware revision
	int32 socketid = 5;	// NUMA socket ID
	Health healthstats = 6;	// controller's health stats
	repeated Namespace namespaces = 7;	// controller's namespaces
}

// NvmeControllerResult represents state of operation performed on controller.
message NvmeControllerResult {
	string pciaddr = 1;		// PCI address of NVMe controller
	ResponseState state = 2;	// state of current operation
}

message PrepareNvmeReq {
	string pciwhitelist = 1;	// Whitespace separated list of PCI addresses
	int32 nrhugepages = 2;		// Number of hugepages to allocate (in MB)
	string targetuser = 3;		// User to access NVMe devices
	bool reset = 4;			// Reset SPDK returning devices to kernel
}

message PrepareNvmeResp {
	ResponseState state = 1;
}

message ScanNvmeReq {}

message ScanNvmeResp {
	repeated NvmeController ctrlrs = 1;
	ResponseState state = 2;
}

message FormatNvmeReq {}

// FormatNvmeResp isn't required because controller results are returned instead
