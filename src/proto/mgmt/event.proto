//
// (C) Copyright 2020 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

// This file defines the messages used by gRPC to communicate events.
// TODO: find a way to sensibly share definitions in duplicate file srv/event.

syntax = "proto3";
package mgmt;

// RankStateEventInfo defines extended fields for rank state change related events.
message RankStateEventInfo {
	uint32 instance = 1;	// Control-plane harness instance index.
	bool errored = 2;	// Rank in error state.
	string error = 3;	// Message associated with error.
}

// PoolSvcEventInfo defines extended fields for pool service change events.
message PoolSvcEventInfo {
	string pool_uuid = 1;		// Pool UUID.
	repeated uint32 svc_ranks = 2;	// Pool service replica ranks.
	int32 raft_leader_term = 3;	// Raft leadership term.
}

// RASEvent describes a RAS event in the DAOS system.
message RASEvent {
	string name = 1;	// Unique identifier, 64-char.
	string timestamp = 2;	// Fully qualified timestamp (us) incl timezone.
	uint32 severity = 3;	// Event severity.
	string msg = 4;		// Human readable message describing event.
	uint32 id = 5;		// Unique numeric event identifier.
	uint32 type = 6;	// Event type.
	uint32 rank = 7; 	// (optional) DAOS rank involved in event.
	string hostname = 8;	// (optional) Hostname of node involved in event.
	oneof extended_info {	// (optional) Instance specific info.
		RankStateEventInfo rank_state_info = 9;
		PoolSvcEventInfo pool_svc_info = 10;
	}
}

// ClusterEventReq contains event details, request sequence and extended info.
message ClusterEventReq {
	uint64 sequence = 1;	// Sequence identifier for cluster events.
	oneof event {
		RASEvent ras = 2;
	}
}

// ClusterEventResp acknowledges receipt of an event notification and an
// error status.
message ClusterEventResp {
	uint64 sequence = 1;	// Sequence identifier for cluster events.
	int32 status = 2;	// DAOS error code.
}
