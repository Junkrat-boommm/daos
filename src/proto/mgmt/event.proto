//
// (C) Copyright 2020-2021 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

// This file defines RAS event related protobuf messages communicated over dRPC
// and gRPC.
// TODO: find a way to sensibly share definitions in duplicate file srv/event.

syntax = "proto3";
package mgmt;

// RankStateEventInfo defines extended fields for rank state change related events.
message RankStateEventInfo {
	uint32 instance = 1;	// Control-plane harness instance index.
	bool errored = 2;	// Rank in error state.
	string error = 3;	// Message associated with error.
}

// PoolSvcEventInfo defines extended fields for pool service change events.
message PoolSvcEventInfo {
	repeated uint32 svc_reps = 1;	// Pool service replica ranks.
	uint64 version = 2;		// Raft leadership term.
}

// RASEvent describes a RAS event in the DAOS system.
message RASEvent {
	string id = 2;		// Unique event identifier, 64-char.
	string timestamp = 3;	// Fully qualified timestamp (us) incl timezone.
	uint32 severity = 4;	// Event severity.
	string msg = 5;		// Human readable message describing event.
	uint32 type = 6;	// Event type.
	string hostname = 7;	// (optional) Hostname of node involved in event.
	uint32 rank = 8;	// (optional) DAOS rank involved in event.
	string hid = 9;		// (optional) Hardware component involved in event.
	string pid = 10;	// (optional) Process involved in event.
	string tid = 11;	// (optional) Thread involved in event.
	string jid = 12;	// (optional) Job involved in event.
	string puuid = 13;	// (optional) Pool UUID involved in event.
	string cuuid = 14;	// (optional) Container UUID involved in event.
	string oid = 15;	// (optional) Object involved in event.
	string cop = 16;	// (optional) Recommended automatic action.
	oneof extended_info {	// Data specific to a given event ID.
		string str_info = 17;	// Opaque data blob.
		RankStateEventInfo rank_state_info = 18;
		PoolSvcEventInfo pool_svc_info = 19;
	}
}

// ClusterEventReq communicates occurrence of a RAS event in the DAOS system.
message ClusterEventReq {
	uint64 sequence = 1;	// Sequence identifier for RAS events.
	RASEvent event = 2;	// RAS event.
}

// RASEventResp acknowledges receipt of an event notification and an error
// status. Acknowledgement does not indicate that the event was handled.
message ClusterEventResp {
	uint64 sequence = 1;	// Sequence identifier for RAS events.
	int32 status = 2;	// DAOS error code.
}
