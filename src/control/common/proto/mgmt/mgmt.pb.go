// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mgmt/mgmt.proto

package mgmt

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	mgmt "mgmt"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("mgmt/mgmt.proto", fileDescriptor_73035302c7c60874)
}

var fileDescriptor_73035302c7c60874 = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4b, 0x73, 0xd3, 0x30,
	0x10, 0xc7, 0x39, 0x74, 0x60, 0x50, 0xe9, 0x23, 0x4a, 0x5b, 0x20, 0xdc, 0xb8, 0x70, 0x22, 0x99,
	0x01, 0x86, 0xd7, 0x30, 0xc3, 0x90, 0x07, 0x50, 0x26, 0xa5, 0x25, 0x1e, 0x2e, 0xdc, 0x54, 0x7b,
	0x9b, 0x7a, 0xb0, 0x2d, 0x23, 0x6d, 0xdc, 0xe6, 0x33, 0xf3, 0x25, 0x98, 0x95, 0x6c, 0x67, 0xed,
	0x24, 0x07, 0x2e, 0x1e, 0xe9, 0xa7, 0xfd, 0xef, 0xae, 0xd6, 0x2b, 0x49, 0x1c, 0xa4, 0xf3, 0x14,
	0x07, 0xf4, 0xe9, 0xe7, 0x46, 0xa3, 0x96, 0x3b, 0x34, 0xee, 0x79, 0x9c, 0x6b, 0x9d, 0x78, 0x5c,
	0x82, 0x50, 0x67, 0xa5, 0x5d, 0x6f, 0xdf, 0x01, 0x5b, 0x84, 0x8d, 0xb9, 0x0a, 0x2b, 0x41, 0xc7,
	0xaf, 0x2f, 0x2d, 0x42, 0x5a, 0xa2, 0x43, 0x87, 0xa0, 0x80, 0xca, 0xc9, 0x8b, 0xbf, 0xbb, 0xe2,
	0xde, 0xd9, 0x3c, 0xc5, 0xa0, 0x08, 0xe5, 0x33, 0xb1, 0xf3, 0x4d, 0xc7, 0x99, 0xdc, 0xeb, 0xbb,
	0x6c, 0x68, 0x3c, 0x83, 0x3f, 0xbd, 0x7d, 0x3e, 0xb5, 0xf9, 0xd3, 0x3b, 0xf2, 0xa3, 0x78, 0x30,
	0x4a, 0x16, 0x16, 0xc1, 0x4c, 0xc8, 0x95, 0x3c, 0xf6, 0x16, 0x9c, 0x91, 0xf0, 0x64, 0x13, 0x76,
	0x0e, 0x3e, 0x88, 0xdd, 0x29, 0xa8, 0x08, 0xcc, 0x8f, 0x05, 0x98, 0xa5, 0x3c, 0xf2, 0x86, 0x0c,
	0x91, 0xfc, 0x78, 0x03, 0x75, 0xea, 0x77, 0x42, 0x5c, 0x68, 0x9d, 0x8c, 0x0c, 0x28, 0x04, 0xd9,
	0xf5, 0x66, 0x2b, 0x42, 0xda, 0xa3, 0x75, 0xe8, 0xa4, 0x43, 0xb1, 0x47, 0x6c, 0x06, 0x56, 0x27,
	0x05, 0x9c, 0x8e, 0xe5, 0xc9, 0xca, 0xb0, 0x86, 0xe4, 0xe0, 0xe1, 0x46, 0x5e, 0x25, 0x4f, 0x78,
	0x0c, 0x16, 0x8d, 0xae, 0x93, 0x67, 0x88, 0x25, 0xdf, 0xa0, 0x4e, 0xfd, 0x5a, 0xdc, 0x27, 0x38,
	0x29, 0xe2, 0x10, 0xa5, 0x5c, 0x59, 0x39, 0x40, 0xca, 0xee, 0x1a, 0xe3, 0x51, 0x27, 0xb7, 0x61,
	0xb2, 0x88, 0x80, 0x47, 0x2d, 0x51, 0x2b, 0x6a, 0x4d, 0x79, 0xd4, 0xb1, 0x51, 0x71, 0xc6, 0xa3,
	0x3a, 0xd0, 0x8a, 0x5a, 0x32, 0x5e, 0xea, 0xc9, 0x2d, 0x42, 0x16, 0xf1, 0x52, 0x7b, 0xd2, 0x2a,
	0x75, 0x05, 0x9d, 0xf4, 0xab, 0x38, 0xf0, 0xd5, 0x8b, 0x33, 0x84, 0xb9, 0xa1, 0x5f, 0xf5, 0x88,
	0x17, 0xb5, 0xc6, 0xe4, 0xe4, 0xf1, 0x96, 0x15, 0x9e, 0xbc, 0xef, 0x15, 0x96, 0x7c, 0xdd, 0x29,
	0xdd, 0x35, 0xc6, 0x4b, 0x16, 0x00, 0x5e, 0x18, 0x9d, 0xf3, 0x92, 0x95, 0xa8, 0x55, 0xb2, 0x9a,
	0x3a, 0x75, 0xdf, 0x6f, 0xfd, 0x0b, 0xe0, 0xa7, 0xd1, 0x54, 0x1e, 0x78, 0x33, 0x3f, 0x23, 0x5d,
	0x79, 0x48, 0xdc, 0xcc, 0xd9, 0xbf, 0x11, 0x87, 0x64, 0x7f, 0x5e, 0x80, 0xb9, 0x31, 0x31, 0x02,
	0xa9, 0xca, 0x64, 0xcf, 0x74, 0x14, 0x5f, 0x2d, 0xb7, 0x09, 0x5f, 0xf9, 0x9e, 0xfc, 0x99, 0x47,
	0xea, 0xff, 0x55, 0x63, 0x48, 0xa0, 0xa1, 0xaa, 0xc1, 0x46, 0xd5, 0x50, 0xec, 0xd1, 0x16, 0x10,
	0x55, 0x78, 0x7d, 0x9a, 0x5d, 0xe9, 0xaa, 0xff, 0x1b, 0x90, 0xf5, 0x7f, 0x8b, 0x57, 0xbf, 0x63,
	0x1a, 0x5b, 0xa4, 0xe8, 0xb6, 0x8a, 0x5a, 0x03, 0xf6, 0x3b, 0x18, 0x2b, 0x7b, 0x69, 0x9f, 0xd0,
	0x48, 0x67, 0xa8, 0xe2, 0x0c, 0x8c, 0x95, 0x9d, 0x95, 0x21, 0x51, 0xd2, 0xca, 0x36, 0xaa, 0x2f,
	0x1c, 0x9d, 0x61, 0x00, 0x78, 0x7e, 0x93, 0x81, 0xa9, 0x2f, 0x1c, 0xc6, 0xf8, 0x85, 0xd3, 0xc0,
	0x55, 0x2b, 0x04, 0xee, 0x22, 0x6c, 0x5c, 0x38, 0x0c, 0xb1, 0x56, 0x68, 0xd0, 0xea, 0x14, 0x78,
	0x18, 0xa0, 0xce, 0xab, 0x53, 0xb0, 0x22, 0xec, 0x14, 0x70, 0xe8, 0xa4, 0xdf, 0x45, 0xc7, 0xb3,
	0x19, 0x58, 0xc0, 0xcf, 0xda, 0xa4, 0x0a, 0x65, 0x8f, 0x1b, 0xb3, 0x05, 0x72, 0xf4, 0x64, 0xeb,
	0x5a, 0x73, 0x23, 0x01, 0x2a, 0x83, 0xb2, 0x15, 0x56, 0x19, 0x5c, 0xdb, 0x48, 0x49, 0x49, 0x3d,
	0x7c, 0xff, 0xeb, 0xed, 0x3c, 0xc6, 0xeb, 0xc5, 0x65, 0x3f, 0xd4, 0xe9, 0x20, 0x52, 0xda, 0x3e,
	0xb7, 0xa8, 0xc2, 0xdf, 0x6e, 0x38, 0xb0, 0x26, 0x74, 0xef, 0x8b, 0xd1, 0xc9, 0x20, 0xd4, 0x69,
	0xaa, 0xb3, 0x81, 0x7b, 0x24, 0xdc, 0xe3, 0x74, 0x79, 0xd7, 0x8d, 0x5f, 0xfe, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0x7a, 0x55, 0x6c, 0x69, 0xb0, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MgmtSvcClient is the client API for MgmtSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MgmtSvcClient interface {
	// Join the server described by JoinReq to the system.
	Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinResp, error)
	// ClusterEvent notify MS of a RAS event in the cluster.
	ClusterEvent(ctx context.Context, in *mgmt.ClusterEventReq, opts ...grpc.CallOption) (*mgmt.ClusterEventResp, error)
	// LeaderQuery provides a mechanism for clients to discover
	// the system's current Management Service leader
	LeaderQuery(ctx context.Context, in *LeaderQueryReq, opts ...grpc.CallOption) (*LeaderQueryResp, error)
	// Create a DAOS pool allocated across a number of ranks
	PoolCreate(ctx context.Context, in *PoolCreateReq, opts ...grpc.CallOption) (*PoolCreateResp, error)
	// Resolve a user-friendly DAOS pool id to a UUID.
	PoolResolveID(ctx context.Context, in *PoolResolveIDReq, opts ...grpc.CallOption) (*PoolResolveIDResp, error)
	// Destroy a DAOS pool allocated across a number of ranks.
	PoolDestroy(ctx context.Context, in *PoolDestroyReq, opts ...grpc.CallOption) (*PoolDestroyResp, error)
	// Evict a DAOS pool's connections.
	PoolEvict(ctx context.Context, in *PoolEvictReq, opts ...grpc.CallOption) (*PoolEvictResp, error)
	// Exclude a pool target.
	PoolExclude(ctx context.Context, in *PoolExcludeReq, opts ...grpc.CallOption) (*PoolExcludeResp, error)
	// Drain a pool target.
	PoolDrain(ctx context.Context, in *PoolDrainReq, opts ...grpc.CallOption) (*PoolDrainResp, error)
	// Extend a pool.
	PoolExtend(ctx context.Context, in *PoolExtendReq, opts ...grpc.CallOption) (*PoolExtendResp, error)
	// Reintegrate a pool target.
	PoolReintegrate(ctx context.Context, in *PoolReintegrateReq, opts ...grpc.CallOption) (*PoolReintegrateResp, error)
	// PoolQuery queries a DAOS pool.
	PoolQuery(ctx context.Context, in *PoolQueryReq, opts ...grpc.CallOption) (*PoolQueryResp, error)
	// Set a DAOS pool property.
	PoolSetProp(ctx context.Context, in *PoolSetPropReq, opts ...grpc.CallOption) (*PoolSetPropResp, error)
	// Fetch the Access Control List for a DAOS pool.
	PoolGetACL(ctx context.Context, in *GetACLReq, opts ...grpc.CallOption) (*ACLResp, error)
	// Overwrite the Access Control List for a DAOS pool with a new one.
	PoolOverwriteACL(ctx context.Context, in *ModifyACLReq, opts ...grpc.CallOption) (*ACLResp, error)
	// Update existing the Access Control List for a DAOS pool with new entries.
	PoolUpdateACL(ctx context.Context, in *ModifyACLReq, opts ...grpc.CallOption) (*ACLResp, error)
	// Delete an entry from a DAOS pool's Access Control List.
	PoolDeleteACL(ctx context.Context, in *DeleteACLReq, opts ...grpc.CallOption) (*ACLResp, error)
	// Get the information required by libdaos to attach to the system.
	GetAttachInfo(ctx context.Context, in *GetAttachInfoReq, opts ...grpc.CallOption) (*GetAttachInfoResp, error)
	// List all pools in a DAOS system: basic info: UUIDs, service ranks.
	ListPools(ctx context.Context, in *ListPoolsReq, opts ...grpc.CallOption) (*ListPoolsResp, error)
	// List all containers in a pool
	ListContainers(ctx context.Context, in *ListContReq, opts ...grpc.CallOption) (*ListContResp, error)
	// Change the owner of a DAOS container
	ContSetOwner(ctx context.Context, in *ContSetOwnerReq, opts ...grpc.CallOption) (*ContSetOwnerResp, error)
	// Query DAOS system status
	SystemQuery(ctx context.Context, in *SystemQueryReq, opts ...grpc.CallOption) (*SystemQueryResp, error)
	// Stop DAOS system (shutdown data-plane instances)
	SystemStop(ctx context.Context, in *SystemStopReq, opts ...grpc.CallOption) (*SystemStopResp, error)
	// ResetFormat DAOS system (restart data-plane instances)
	SystemResetFormat(ctx context.Context, in *SystemResetFormatReq, opts ...grpc.CallOption) (*SystemResetFormatResp, error)
	// Start DAOS system (restart data-plane instances)
	SystemStart(ctx context.Context, in *SystemStartReq, opts ...grpc.CallOption) (*SystemStartResp, error)
}

type mgmtSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtSvcClient(cc grpc.ClientConnInterface) MgmtSvcClient {
	return &mgmtSvcClient{cc}
}

func (c *mgmtSvcClient) Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinResp, error) {
	out := new(JoinResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) ClusterEvent(ctx context.Context, in *mgmt.ClusterEventReq, opts ...grpc.CallOption) (*mgmt.ClusterEventResp, error) {
	out := new(mgmt.ClusterEventResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/ClusterEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) LeaderQuery(ctx context.Context, in *LeaderQueryReq, opts ...grpc.CallOption) (*LeaderQueryResp, error) {
	out := new(LeaderQueryResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/LeaderQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolCreate(ctx context.Context, in *PoolCreateReq, opts ...grpc.CallOption) (*PoolCreateResp, error) {
	out := new(PoolCreateResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolResolveID(ctx context.Context, in *PoolResolveIDReq, opts ...grpc.CallOption) (*PoolResolveIDResp, error) {
	out := new(PoolResolveIDResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolResolveID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolDestroy(ctx context.Context, in *PoolDestroyReq, opts ...grpc.CallOption) (*PoolDestroyResp, error) {
	out := new(PoolDestroyResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolEvict(ctx context.Context, in *PoolEvictReq, opts ...grpc.CallOption) (*PoolEvictResp, error) {
	out := new(PoolEvictResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolEvict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolExclude(ctx context.Context, in *PoolExcludeReq, opts ...grpc.CallOption) (*PoolExcludeResp, error) {
	out := new(PoolExcludeResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolExclude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolDrain(ctx context.Context, in *PoolDrainReq, opts ...grpc.CallOption) (*PoolDrainResp, error) {
	out := new(PoolDrainResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolDrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolExtend(ctx context.Context, in *PoolExtendReq, opts ...grpc.CallOption) (*PoolExtendResp, error) {
	out := new(PoolExtendResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolExtend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolReintegrate(ctx context.Context, in *PoolReintegrateReq, opts ...grpc.CallOption) (*PoolReintegrateResp, error) {
	out := new(PoolReintegrateResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolReintegrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolQuery(ctx context.Context, in *PoolQueryReq, opts ...grpc.CallOption) (*PoolQueryResp, error) {
	out := new(PoolQueryResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolSetProp(ctx context.Context, in *PoolSetPropReq, opts ...grpc.CallOption) (*PoolSetPropResp, error) {
	out := new(PoolSetPropResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolSetProp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolGetACL(ctx context.Context, in *GetACLReq, opts ...grpc.CallOption) (*ACLResp, error) {
	out := new(ACLResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolGetACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolOverwriteACL(ctx context.Context, in *ModifyACLReq, opts ...grpc.CallOption) (*ACLResp, error) {
	out := new(ACLResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolOverwriteACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolUpdateACL(ctx context.Context, in *ModifyACLReq, opts ...grpc.CallOption) (*ACLResp, error) {
	out := new(ACLResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolUpdateACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolDeleteACL(ctx context.Context, in *DeleteACLReq, opts ...grpc.CallOption) (*ACLResp, error) {
	out := new(ACLResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/PoolDeleteACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) GetAttachInfo(ctx context.Context, in *GetAttachInfoReq, opts ...grpc.CallOption) (*GetAttachInfoResp, error) {
	out := new(GetAttachInfoResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/GetAttachInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) ListPools(ctx context.Context, in *ListPoolsReq, opts ...grpc.CallOption) (*ListPoolsResp, error) {
	out := new(ListPoolsResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/ListPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) ListContainers(ctx context.Context, in *ListContReq, opts ...grpc.CallOption) (*ListContResp, error) {
	out := new(ListContResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/ListContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) ContSetOwner(ctx context.Context, in *ContSetOwnerReq, opts ...grpc.CallOption) (*ContSetOwnerResp, error) {
	out := new(ContSetOwnerResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/ContSetOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemQuery(ctx context.Context, in *SystemQueryReq, opts ...grpc.CallOption) (*SystemQueryResp, error) {
	out := new(SystemQueryResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/SystemQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemStop(ctx context.Context, in *SystemStopReq, opts ...grpc.CallOption) (*SystemStopResp, error) {
	out := new(SystemStopResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/SystemStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemResetFormat(ctx context.Context, in *SystemResetFormatReq, opts ...grpc.CallOption) (*SystemResetFormatResp, error) {
	out := new(SystemResetFormatResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/SystemResetFormat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemStart(ctx context.Context, in *SystemStartReq, opts ...grpc.CallOption) (*SystemStartResp, error) {
	out := new(SystemStartResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/SystemStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtSvcServer is the server API for MgmtSvc service.
type MgmtSvcServer interface {
	// Join the server described by JoinReq to the system.
	Join(context.Context, *JoinReq) (*JoinResp, error)
	// ClusterEvent notify MS of a RAS event in the cluster.
	ClusterEvent(context.Context, *mgmt.ClusterEventReq) (*mgmt.ClusterEventResp, error)
	// LeaderQuery provides a mechanism for clients to discover
	// the system's current Management Service leader
	LeaderQuery(context.Context, *LeaderQueryReq) (*LeaderQueryResp, error)
	// Create a DAOS pool allocated across a number of ranks
	PoolCreate(context.Context, *PoolCreateReq) (*PoolCreateResp, error)
	// Resolve a user-friendly DAOS pool id to a UUID.
	PoolResolveID(context.Context, *PoolResolveIDReq) (*PoolResolveIDResp, error)
	// Destroy a DAOS pool allocated across a number of ranks.
	PoolDestroy(context.Context, *PoolDestroyReq) (*PoolDestroyResp, error)
	// Evict a DAOS pool's connections.
	PoolEvict(context.Context, *PoolEvictReq) (*PoolEvictResp, error)
	// Exclude a pool target.
	PoolExclude(context.Context, *PoolExcludeReq) (*PoolExcludeResp, error)
	// Drain a pool target.
	PoolDrain(context.Context, *PoolDrainReq) (*PoolDrainResp, error)
	// Extend a pool.
	PoolExtend(context.Context, *PoolExtendReq) (*PoolExtendResp, error)
	// Reintegrate a pool target.
	PoolReintegrate(context.Context, *PoolReintegrateReq) (*PoolReintegrateResp, error)
	// PoolQuery queries a DAOS pool.
	PoolQuery(context.Context, *PoolQueryReq) (*PoolQueryResp, error)
	// Set a DAOS pool property.
	PoolSetProp(context.Context, *PoolSetPropReq) (*PoolSetPropResp, error)
	// Fetch the Access Control List for a DAOS pool.
	PoolGetACL(context.Context, *GetACLReq) (*ACLResp, error)
	// Overwrite the Access Control List for a DAOS pool with a new one.
	PoolOverwriteACL(context.Context, *ModifyACLReq) (*ACLResp, error)
	// Update existing the Access Control List for a DAOS pool with new entries.
	PoolUpdateACL(context.Context, *ModifyACLReq) (*ACLResp, error)
	// Delete an entry from a DAOS pool's Access Control List.
	PoolDeleteACL(context.Context, *DeleteACLReq) (*ACLResp, error)
	// Get the information required by libdaos to attach to the system.
	GetAttachInfo(context.Context, *GetAttachInfoReq) (*GetAttachInfoResp, error)
	// List all pools in a DAOS system: basic info: UUIDs, service ranks.
	ListPools(context.Context, *ListPoolsReq) (*ListPoolsResp, error)
	// List all containers in a pool
	ListContainers(context.Context, *ListContReq) (*ListContResp, error)
	// Change the owner of a DAOS container
	ContSetOwner(context.Context, *ContSetOwnerReq) (*ContSetOwnerResp, error)
	// Query DAOS system status
	SystemQuery(context.Context, *SystemQueryReq) (*SystemQueryResp, error)
	// Stop DAOS system (shutdown data-plane instances)
	SystemStop(context.Context, *SystemStopReq) (*SystemStopResp, error)
	// ResetFormat DAOS system (restart data-plane instances)
	SystemResetFormat(context.Context, *SystemResetFormatReq) (*SystemResetFormatResp, error)
	// Start DAOS system (restart data-plane instances)
	SystemStart(context.Context, *SystemStartReq) (*SystemStartResp, error)
}

// UnimplementedMgmtSvcServer can be embedded to have forward compatible implementations.
type UnimplementedMgmtSvcServer struct {
}

func (*UnimplementedMgmtSvcServer) Join(ctx context.Context, req *JoinReq) (*JoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedMgmtSvcServer) ClusterEvent(ctx context.Context, req *mgmt.ClusterEventReq) (*mgmt.ClusterEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterEvent not implemented")
}
func (*UnimplementedMgmtSvcServer) LeaderQuery(ctx context.Context, req *LeaderQueryReq) (*LeaderQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderQuery not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolCreate(ctx context.Context, req *PoolCreateReq) (*PoolCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolCreate not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolResolveID(ctx context.Context, req *PoolResolveIDReq) (*PoolResolveIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolResolveID not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolDestroy(ctx context.Context, req *PoolDestroyReq) (*PoolDestroyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDestroy not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolEvict(ctx context.Context, req *PoolEvictReq) (*PoolEvictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolEvict not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolExclude(ctx context.Context, req *PoolExcludeReq) (*PoolExcludeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolExclude not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolDrain(ctx context.Context, req *PoolDrainReq) (*PoolDrainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDrain not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolExtend(ctx context.Context, req *PoolExtendReq) (*PoolExtendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolExtend not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolReintegrate(ctx context.Context, req *PoolReintegrateReq) (*PoolReintegrateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolReintegrate not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolQuery(ctx context.Context, req *PoolQueryReq) (*PoolQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolQuery not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolSetProp(ctx context.Context, req *PoolSetPropReq) (*PoolSetPropResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolSetProp not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolGetACL(ctx context.Context, req *GetACLReq) (*ACLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolGetACL not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolOverwriteACL(ctx context.Context, req *ModifyACLReq) (*ACLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolOverwriteACL not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolUpdateACL(ctx context.Context, req *ModifyACLReq) (*ACLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolUpdateACL not implemented")
}
func (*UnimplementedMgmtSvcServer) PoolDeleteACL(ctx context.Context, req *DeleteACLReq) (*ACLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDeleteACL not implemented")
}
func (*UnimplementedMgmtSvcServer) GetAttachInfo(ctx context.Context, req *GetAttachInfoReq) (*GetAttachInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachInfo not implemented")
}
func (*UnimplementedMgmtSvcServer) ListPools(ctx context.Context, req *ListPoolsReq) (*ListPoolsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPools not implemented")
}
func (*UnimplementedMgmtSvcServer) ListContainers(ctx context.Context, req *ListContReq) (*ListContResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainers not implemented")
}
func (*UnimplementedMgmtSvcServer) ContSetOwner(ctx context.Context, req *ContSetOwnerReq) (*ContSetOwnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContSetOwner not implemented")
}
func (*UnimplementedMgmtSvcServer) SystemQuery(ctx context.Context, req *SystemQueryReq) (*SystemQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemQuery not implemented")
}
func (*UnimplementedMgmtSvcServer) SystemStop(ctx context.Context, req *SystemStopReq) (*SystemStopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStop not implemented")
}
func (*UnimplementedMgmtSvcServer) SystemResetFormat(ctx context.Context, req *SystemResetFormatReq) (*SystemResetFormatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemResetFormat not implemented")
}
func (*UnimplementedMgmtSvcServer) SystemStart(ctx context.Context, req *SystemStartReq) (*SystemStartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStart not implemented")
}

func RegisterMgmtSvcServer(s *grpc.Server, srv MgmtSvcServer) {
	s.RegisterService(&_MgmtSvc_serviceDesc, srv)
}

func _MgmtSvc_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).Join(ctx, req.(*JoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_ClusterEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(mgmt.ClusterEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).ClusterEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/ClusterEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).ClusterEvent(ctx, req.(*mgmt.ClusterEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_LeaderQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).LeaderQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/LeaderQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).LeaderQuery(ctx, req.(*LeaderQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolCreate(ctx, req.(*PoolCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolResolveID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolResolveIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolResolveID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolResolveID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolResolveID(ctx, req.(*PoolResolveIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolDestroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolDestroy(ctx, req.(*PoolDestroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolEvict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolEvictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolEvict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolEvict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolEvict(ctx, req.(*PoolEvictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolExclude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolExcludeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolExclude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolExclude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolExclude(ctx, req.(*PoolExcludeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolDrainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolDrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolDrain(ctx, req.(*PoolDrainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolExtend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolExtendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolExtend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolExtend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolExtend(ctx, req.(*PoolExtendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolReintegrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolReintegrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolReintegrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolReintegrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolReintegrate(ctx, req.(*PoolReintegrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolQuery(ctx, req.(*PoolQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolSetProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolSetPropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolSetProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolSetProp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolSetProp(ctx, req.(*PoolSetPropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolGetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolGetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolGetACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolGetACL(ctx, req.(*GetACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolOverwriteACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolOverwriteACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolOverwriteACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolOverwriteACL(ctx, req.(*ModifyACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolUpdateACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolUpdateACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolUpdateACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolUpdateACL(ctx, req.(*ModifyACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolDeleteACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolDeleteACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/PoolDeleteACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolDeleteACL(ctx, req.(*DeleteACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_GetAttachInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).GetAttachInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/GetAttachInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).GetAttachInfo(ctx, req.(*GetAttachInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_ListPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoolsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).ListPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/ListPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).ListPools(ctx, req.(*ListPoolsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/ListContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).ListContainers(ctx, req.(*ListContReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_ContSetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContSetOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).ContSetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/ContSetOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).ContSetOwner(ctx, req.(*ContSetOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/SystemQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemQuery(ctx, req.(*SystemQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/SystemStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemStop(ctx, req.(*SystemStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemResetFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemResetFormatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemResetFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/SystemResetFormat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemResetFormat(ctx, req.(*SystemResetFormatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/SystemStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemStart(ctx, req.(*SystemStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MgmtSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mgmt.MgmtSvc",
	HandlerType: (*MgmtSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _MgmtSvc_Join_Handler,
		},
		{
			MethodName: "ClusterEvent",
			Handler:    _MgmtSvc_ClusterEvent_Handler,
		},
		{
			MethodName: "LeaderQuery",
			Handler:    _MgmtSvc_LeaderQuery_Handler,
		},
		{
			MethodName: "PoolCreate",
			Handler:    _MgmtSvc_PoolCreate_Handler,
		},
		{
			MethodName: "PoolResolveID",
			Handler:    _MgmtSvc_PoolResolveID_Handler,
		},
		{
			MethodName: "PoolDestroy",
			Handler:    _MgmtSvc_PoolDestroy_Handler,
		},
		{
			MethodName: "PoolEvict",
			Handler:    _MgmtSvc_PoolEvict_Handler,
		},
		{
			MethodName: "PoolExclude",
			Handler:    _MgmtSvc_PoolExclude_Handler,
		},
		{
			MethodName: "PoolDrain",
			Handler:    _MgmtSvc_PoolDrain_Handler,
		},
		{
			MethodName: "PoolExtend",
			Handler:    _MgmtSvc_PoolExtend_Handler,
		},
		{
			MethodName: "PoolReintegrate",
			Handler:    _MgmtSvc_PoolReintegrate_Handler,
		},
		{
			MethodName: "PoolQuery",
			Handler:    _MgmtSvc_PoolQuery_Handler,
		},
		{
			MethodName: "PoolSetProp",
			Handler:    _MgmtSvc_PoolSetProp_Handler,
		},
		{
			MethodName: "PoolGetACL",
			Handler:    _MgmtSvc_PoolGetACL_Handler,
		},
		{
			MethodName: "PoolOverwriteACL",
			Handler:    _MgmtSvc_PoolOverwriteACL_Handler,
		},
		{
			MethodName: "PoolUpdateACL",
			Handler:    _MgmtSvc_PoolUpdateACL_Handler,
		},
		{
			MethodName: "PoolDeleteACL",
			Handler:    _MgmtSvc_PoolDeleteACL_Handler,
		},
		{
			MethodName: "GetAttachInfo",
			Handler:    _MgmtSvc_GetAttachInfo_Handler,
		},
		{
			MethodName: "ListPools",
			Handler:    _MgmtSvc_ListPools_Handler,
		},
		{
			MethodName: "ListContainers",
			Handler:    _MgmtSvc_ListContainers_Handler,
		},
		{
			MethodName: "ContSetOwner",
			Handler:    _MgmtSvc_ContSetOwner_Handler,
		},
		{
			MethodName: "SystemQuery",
			Handler:    _MgmtSvc_SystemQuery_Handler,
		},
		{
			MethodName: "SystemStop",
			Handler:    _MgmtSvc_SystemStop_Handler,
		},
		{
			MethodName: "SystemResetFormat",
			Handler:    _MgmtSvc_SystemResetFormat_Handler,
		},
		{
			MethodName: "SystemStart",
			Handler:    _MgmtSvc_SystemStart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mgmt/mgmt.proto",
}
