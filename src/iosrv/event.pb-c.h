/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: event.proto */

#ifndef PROTOBUF_C_event_2eproto__INCLUDED
#define PROTOBUF_C_event_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Mgmt__RankStateEventInfo Mgmt__RankStateEventInfo;
typedef struct _Mgmt__PoolSvcEventInfo Mgmt__PoolSvcEventInfo;
typedef struct _Mgmt__RASEvent Mgmt__RASEvent;
typedef struct _Mgmt__ClusterEventReq Mgmt__ClusterEventReq;
typedef struct _Mgmt__ClusterEventResp Mgmt__ClusterEventResp;


/* --- enums --- */


/* --- messages --- */

/*
 * RankStateEventInfo defines extended fields for rank state change related events.
 */
struct  _Mgmt__RankStateEventInfo
{
  ProtobufCMessage base;
  /*
   * Control-plane harness instance index.
   */
  uint32_t instance;
  /*
   * Rank in error state.
   */
  protobuf_c_boolean errored;
  /*
   * Message associated with error.
   */
  char *error;
};
#define MGMT__RANK_STATE_EVENT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmt__rank_state_event_info__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string }


/*
 * PoolSvcEventInfo defines extended fields for pool service change events.
 */
struct  _Mgmt__PoolSvcEventInfo
{
  ProtobufCMessage base;
  /*
   * Pool UUID.
   */
  char *pool_uuid;
  /*
   * Pool service replica ranks.
   */
  size_t n_svc_ranks;
  uint32_t *svc_ranks;
  /*
   * Raft leadership term.
   */
  int32_t raft_leader_term;
};
#define MGMT__POOL_SVC_EVENT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmt__pool_svc_event_info__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0 }


typedef enum {
  MGMT__RASEVENT__EXTENDED_INFO__NOT_SET = 0,
  MGMT__RASEVENT__EXTENDED_INFO_RANK_STATE_INFO = 9,
  MGMT__RASEVENT__EXTENDED_INFO_POOL_SVC_INFO = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MGMT__RASEVENT__EXTENDED_INFO)
} Mgmt__RASEvent__ExtendedInfoCase;

/*
 * RASEvent describes a RAS event in the DAOS system.
 */
struct  _Mgmt__RASEvent
{
  ProtobufCMessage base;
  /*
   * Unique identifier, 64-char.
   */
  char *name;
  /*
   * Fully qualified timestamp (us) incl timezone.
   */
  char *timestamp;
  /*
   * Event severity.
   */
  uint32_t severity;
  /*
   * Human readable message describing event.
   */
  char *msg;
  /*
   * Unique numeric event identifier.
   */
  uint32_t id;
  /*
   * Event type.
   */
  uint32_t type;
  /*
   * (optional) DAOS rank involved in event.
   */
  uint32_t rank;
  /*
   * (optional) Hostname of node involved in event.
   */
  char *hostname;
  Mgmt__RASEvent__ExtendedInfoCase extended_info_case;
  union {
    Mgmt__RankStateEventInfo *rank_state_info;
    Mgmt__PoolSvcEventInfo *pool_svc_info;
  };
};
#define MGMT__RASEVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmt__rasevent__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0, 0, 0, (char *)protobuf_c_empty_string, MGMT__RASEVENT__EXTENDED_INFO__NOT_SET, {0} }


typedef enum {
  MGMT__CLUSTER_EVENT_REQ__EVENT__NOT_SET = 0,
  MGMT__CLUSTER_EVENT_REQ__EVENT_RAS = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MGMT__CLUSTER_EVENT_REQ__EVENT)
} Mgmt__ClusterEventReq__EventCase;

/*
 * ClusterEventReq contains event details, request sequence and extended info.
 */
struct  _Mgmt__ClusterEventReq
{
  ProtobufCMessage base;
  /*
   * Sequence identifier for cluster events.
   */
  uint64_t sequence;
  Mgmt__ClusterEventReq__EventCase event_case;
  union {
    Mgmt__RASEvent *ras;
  };
};
#define MGMT__CLUSTER_EVENT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmt__cluster_event_req__descriptor) \
    , 0, MGMT__CLUSTER_EVENT_REQ__EVENT__NOT_SET, {0} }


/*
 * ClusterEventResp acknowledges receipt of an event notification and an
 * error status.
 */
struct  _Mgmt__ClusterEventResp
{
  ProtobufCMessage base;
  /*
   * Sequence identifier for cluster events.
   */
  uint64_t sequence;
  /*
   * DAOS error code.
   */
  int32_t status;
};
#define MGMT__CLUSTER_EVENT_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmt__cluster_event_resp__descriptor) \
    , 0, 0 }


/* Mgmt__RankStateEventInfo methods */
void   mgmt__rank_state_event_info__init
                     (Mgmt__RankStateEventInfo         *message);
size_t mgmt__rank_state_event_info__get_packed_size
                     (const Mgmt__RankStateEventInfo   *message);
size_t mgmt__rank_state_event_info__pack
                     (const Mgmt__RankStateEventInfo   *message,
                      uint8_t             *out);
size_t mgmt__rank_state_event_info__pack_to_buffer
                     (const Mgmt__RankStateEventInfo   *message,
                      ProtobufCBuffer     *buffer);
Mgmt__RankStateEventInfo *
       mgmt__rank_state_event_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmt__rank_state_event_info__free_unpacked
                     (Mgmt__RankStateEventInfo *message,
                      ProtobufCAllocator *allocator);
/* Mgmt__PoolSvcEventInfo methods */
void   mgmt__pool_svc_event_info__init
                     (Mgmt__PoolSvcEventInfo         *message);
size_t mgmt__pool_svc_event_info__get_packed_size
                     (const Mgmt__PoolSvcEventInfo   *message);
size_t mgmt__pool_svc_event_info__pack
                     (const Mgmt__PoolSvcEventInfo   *message,
                      uint8_t             *out);
size_t mgmt__pool_svc_event_info__pack_to_buffer
                     (const Mgmt__PoolSvcEventInfo   *message,
                      ProtobufCBuffer     *buffer);
Mgmt__PoolSvcEventInfo *
       mgmt__pool_svc_event_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmt__pool_svc_event_info__free_unpacked
                     (Mgmt__PoolSvcEventInfo *message,
                      ProtobufCAllocator *allocator);
/* Mgmt__RASEvent methods */
void   mgmt__rasevent__init
                     (Mgmt__RASEvent         *message);
size_t mgmt__rasevent__get_packed_size
                     (const Mgmt__RASEvent   *message);
size_t mgmt__rasevent__pack
                     (const Mgmt__RASEvent   *message,
                      uint8_t             *out);
size_t mgmt__rasevent__pack_to_buffer
                     (const Mgmt__RASEvent   *message,
                      ProtobufCBuffer     *buffer);
Mgmt__RASEvent *
       mgmt__rasevent__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmt__rasevent__free_unpacked
                     (Mgmt__RASEvent *message,
                      ProtobufCAllocator *allocator);
/* Mgmt__ClusterEventReq methods */
void   mgmt__cluster_event_req__init
                     (Mgmt__ClusterEventReq         *message);
size_t mgmt__cluster_event_req__get_packed_size
                     (const Mgmt__ClusterEventReq   *message);
size_t mgmt__cluster_event_req__pack
                     (const Mgmt__ClusterEventReq   *message,
                      uint8_t             *out);
size_t mgmt__cluster_event_req__pack_to_buffer
                     (const Mgmt__ClusterEventReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmt__ClusterEventReq *
       mgmt__cluster_event_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmt__cluster_event_req__free_unpacked
                     (Mgmt__ClusterEventReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmt__ClusterEventResp methods */
void   mgmt__cluster_event_resp__init
                     (Mgmt__ClusterEventResp         *message);
size_t mgmt__cluster_event_resp__get_packed_size
                     (const Mgmt__ClusterEventResp   *message);
size_t mgmt__cluster_event_resp__pack
                     (const Mgmt__ClusterEventResp   *message,
                      uint8_t             *out);
size_t mgmt__cluster_event_resp__pack_to_buffer
                     (const Mgmt__ClusterEventResp   *message,
                      ProtobufCBuffer     *buffer);
Mgmt__ClusterEventResp *
       mgmt__cluster_event_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmt__cluster_event_resp__free_unpacked
                     (Mgmt__ClusterEventResp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Mgmt__RankStateEventInfo_Closure)
                 (const Mgmt__RankStateEventInfo *message,
                  void *closure_data);
typedef void (*Mgmt__PoolSvcEventInfo_Closure)
                 (const Mgmt__PoolSvcEventInfo *message,
                  void *closure_data);
typedef void (*Mgmt__RASEvent_Closure)
                 (const Mgmt__RASEvent *message,
                  void *closure_data);
typedef void (*Mgmt__ClusterEventReq_Closure)
                 (const Mgmt__ClusterEventReq *message,
                  void *closure_data);
typedef void (*Mgmt__ClusterEventResp_Closure)
                 (const Mgmt__ClusterEventResp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor mgmt__rank_state_event_info__descriptor;
extern const ProtobufCMessageDescriptor mgmt__pool_svc_event_info__descriptor;
extern const ProtobufCMessageDescriptor mgmt__rasevent__descriptor;
extern const ProtobufCMessageDescriptor mgmt__cluster_event_req__descriptor;
extern const ProtobufCMessageDescriptor mgmt__cluster_event_resp__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_event_2eproto__INCLUDED */
